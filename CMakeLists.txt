# Minimum CMake version required, we'll just use the latest version.
cmake_minimum_required(VERSION 3.22)
# Project name, version and description
project(test VERSION 1.0 DESCRIPTION "Polarity Test")

# Set the compiler
set(CMAKE_CXX_COMPILER g++)

# Compare the new contents with the existing file, if it exists and is the
# same we don't want to trigger a make by changing its timestamp.
function(update_file path content)
    set(old_content "")
    if(EXISTS "${path}")
        file(READ "${path}" old_content)
    endif()
    if(NOT old_content STREQUAL content)
        file(WRITE "${path}" "${content}")
    endif()
endfunction(update_file)

# Creates a file called CMakeDeps.cmake next to your CMakeLists.txt with
# the list of dependencies in it - this file should be treated as part of
# CMakeLists.txt (source controlled, etc.).
function(update_deps_file deps)
    set(deps_file "CMakeDeps.cmake")
    # Normalize the list so it's the same on every machine
    list(REMOVE_DUPLICATES deps)
    foreach(dep IN LISTS deps)
        file(RELATIVE_PATH rel_dep ${CMAKE_CURRENT_SOURCE_DIR} ${dep})
        list(APPEND rel_deps ${rel_dep})
    endforeach(dep)
    list(SORT rel_deps)
    # Update the deps file
    set(content "# generated by make process\nset(sources ${rel_deps})\n")
    update_file(${deps_file} "${content}")
    # Include the file so it's tracked as a generation dependency we don't
    # need the content.
    include(${deps_file})
endfunction(update_deps_file)

file (GLOB_RECURSE sources LIST_DIRECTORIES false *.hpp *.cpp)
update_deps_file("${sources}/src")

find_package(OpenCV REQUIRED)
find_package(Armadillo REQUIRED)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include )
link_directories(${CMAKE_BINARY_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

add_executable(${PROJECT_NAME} ${sources})

target_link_libraries( ${PROJECT_NAME} ${OpenCV_LIBS} ${Armadillo_LIBS})

# Set C++ version
set_target_properties(${PROJECT_NAME} PROPERTIES
        CXX_STANDARD 20
        CXX_STANDARD_REQUIRED ON
)

# Set Compiler flags
if (MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE
            /W4
    )
else()
    target_compile_options(${PROJECT_NAME} PRIVATE
            -Wall -Wextra -O3 -march=native
    )
endif()